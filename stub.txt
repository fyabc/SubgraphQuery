    ofstream outFile(path + "/result/result_pl_" + N + "_" + p + ".txt");

    auto n = pG->size();
    auto maxDegree = pG->maxDegree();
    vector<size_t> degrees;
    vector<mpz_class> numbers(n, mpz_class(1));
    for (size_t i = 0; i < n; ++i)
        degrees.push_back(pG->degree(i));

    for (size_t i = 1; i <= n; ++i) {
        if (i % 100 == 0)
            cout << i << endl;
        if (i > maxDegree)
            outFile << i << "\t0\t0" << endl;
        else {
            mpz_class result = accumulate(numbers.begin(), numbers.end(), mpz_class(0));
            auto resultStr = result.get_str(10);
            outFile << i << "\t" << resultStr[0] << "." << resultStr.substr(1, 2) <<
                    "E" << resultStr.size() - 1 << "\t" << resultStr.size() - 1 << endl;

            for (size_t j = 0; j < n; ++j) {
                if (degrees[j] > 0) {
                    numbers[j] *= degrees[j];
                    --degrees[j];
                }
                else if (degrees[j] == 0)
                    numbers[j] = 0;
            }
        }
    }

    outFile.close();